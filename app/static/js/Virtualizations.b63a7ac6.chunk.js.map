{"version":3,"sources":["modules/data/pages/VirtualizationCreatePage.tsx","modules/data/shared/HeaderView.tsx","modules/data/shared/VirtualizationNavBar.tsx","modules/data/pages/VirtualizationMetricsPage.tsx","modules/data/pages/VirtualizationRelationshipPage.tsx","modules/data/pages/VirtualizationsPage.tsx","modules/data/pages/VirtualizationSqlClientPage.tsx","modules/data/pages/VirtualizationViewsPage.tsx","modules/data/DataApp.tsx"],"names":["VirtualizationCreatePage","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","formDefinition","virtDescription","componentProperty","deprecated","displayName","i18n","t","javaType","kind","order","required","secret","type","virtName","validate","v","errors","includes","react","utils","p","s","_ref","history","api","username","_ref2","createVirtualization","handleCreate","_ref3","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","push","resolvers","data","virtualizations","list","stop","_x","es","ns","ui","Link","to","dashboard","root","auto_form","definition","initialValue","i18nRequiredProperty","onSave","_ref4","fields","handleSubmit","className","onClick","React","HeaderView","props","call","virtualizationId","hasData","error","loading","loaderChildren","errorChildren","keng__id","tko__description","VirtualizationNavBar","virtualization","style","background","label","views","relationship","sqlClient","metrics","VirtualizationMetricsPage","HeaderView_HeaderView","VirtualizationNavBar_VirtualizationNavBar","VirtualizationRelationshipPage","filterByName","filterType","id","placeholder","title","filterTypes","sortByName","isNumeric","sortTypes","VirtualizationsPage","undefined","virtualizationName","alert","_this","deleteVirtualization","publishVirtualization","unpublishServiceVdb","handleDelete","handlePublish","_callee2","_context2","_x2","handleUnpublish","_callee3","serviceVdbName","_context3","_x3","_ref5","defaultFilterType","defaultSortType","helpers","filteredAndSorted","activeFilters","currentSortType","isSortAscending","forEach","filter","valueToLower","toLowerCase","sort","thisVirtualization","thatVirtualization","localeCompare","getFilteredAndSortedVirtualizations","assign","state","resultsCount","length","i18nCreateDataVirtualization","i18nCreateDataVirtualizationTip","i18nDescription","i18nEmptyStateInfo","i18nEmptyStateTitle","i18nImport","i18nImportTip","i18nLinkCreateVirtualization","i18nName","i18nNameFilterPlaceholder","i18nResultsCount","count","i18nTitle","linkCreateHRef","create","onImport","handleImportVirt","hasListData","width","backgroundColor","marginTop","map","index","detailsPageLink","virtualizationDescription","i18nCancelText","i18nDelete","i18nDeleteModalMessage","name","i18nDeleteModalTitle","i18nDraft","i18nEdit","i18nEditTip","i18nError","i18nExport","i18nPublished","i18nUnpublish","i18nPublish","onDelete","onEdit","handleEditVirtualization","onExport","handleExportVirtualization","onUnpublish","onPublish","currentPublishedState","publishedState","publishLogUrl","i18nPublishInProgress","i18nPublishLogUrlText","VirtualizationSqlClientPage","VirtualizationViewsPage","view","viewName","thisView","thatView","getFilteredAndSortedViews","i18nImportView","i18nImportViewTip","i18nCreateView","i18nCreateViewTip","onImportView","handleImportView","filterUndefinedId","viewDescription","handleDeleteView","handleEditView","DataApp","Switch","Redirect","path","routes","exact","Route","component"],"mappings":"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","file":"static/js/Virtualizations.b63a7ac6.chunk.js","sourcesContent":["import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\n\nexport class VirtualizationCreatePage extends React.Component {\n  public render() {\n    const formDefinition = {\n      virtDescription: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t(\n          'data:virtualization.virtualizationDescriptionDisplay'\n        ),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 1,\n        required: false,\n        secret: false,\n        type: 'textarea',\n      },\n      virtName: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t('data:virtualization.virtualizationNameDisplay'),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 0,\n        required: true,\n        secret: false,\n        type: 'string',\n      },\n    } as IFormDefinition;\n    const validate = (v: { virtName: string }) => {\n      const errors: any = {};\n      // TODO Incorporate service call to validate virtualization name\n      if (v.virtName.includes('?')) {\n        errors.virtName = 'Virtualization name contains an illegal character';\n      }\n      return errors;\n    };\n\n    return (\n      <WithRouteData<null, null>>\n        {(p, s, { history }) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ createVirtualization }) => {\n              const handleCreate = async (value: any) => {\n                await createVirtualization(\n                  value.virtName,\n                  value.virtDescription\n                );\n                // TODO: post toast notification\n                history.push(resolvers.data.virtualizations.list());\n              };\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <>\n                      <Breadcrumb>\n                        <Link to={resolvers.dashboard.root()}>\n                          {t('shared:Home')}\n                        </Link>\n                        <Link to={resolvers.data.root()}>\n                          {t('shared:DataVirtualizations')}\n                        </Link>\n                        <span>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </span>\n                      </Breadcrumb>\n                      <Container>\n                        <h1>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </h1>\n                        <AutoForm\n                          definition={formDefinition}\n                          initialValue={''}\n                          i18nRequiredProperty={t(\n                            'data:virtualization.requiredPropertyText'\n                          )}\n                          validate={validate}\n                          onSave={handleCreate}\n                        >\n                          {({ fields, handleSubmit }) => (\n                            <React.Fragment>\n                              {fields}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={handleSubmit}\n                              >\n                                {t('shared:Create')}\n                              </button>\n                            </React.Fragment>\n                          )}\n                        </AutoForm>\n                      </Container>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualization } from '@syndesis/api';\nimport { Container, Loader } from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithVirtualizationDetailHeaderProps {\n  virtualizationId: string;\n}\n\nexport class HeaderView extends React.Component<\n  IWithVirtualizationDetailHeaderProps\n> {\n  public constructor(props: IWithVirtualizationDetailHeaderProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <WithVirtualization virtualizationId={this.props.virtualizationId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<div>TODO</div>}\n          >\n            {() => (\n              <Container>\n                <h2>{data.keng__id}</h2>\n                <h3>{data.tko__description}</h3>\n              </Container>\n            )}\n          </WithLoader>\n        )}\n      </WithVirtualization>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualization - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationNavBarProps#virtualization}.\n */\n\nexport interface IVirtualizationNavBarProps {\n  virtualization: RestDataService;\n}\n\n/**\n * A component that displays a nav bar with 4 items:\n *\n * 1. a link to the page that displays a list of Views\n * 2. a link to the page that displays relationships\n * 3. a link to the page that displays the SQL Query editor\n * 4. a link to the page that dispays metrics\n *\n */\nexport class VirtualizationNavBar extends React.Component<\n  IVirtualizationNavBarProps\n> {\n  public render() {\n    const virtualization = this.props.virtualization;\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('data:virtualization.views')}\n                to={resolvers.virtualizations.views({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.relationship')}\n                to={resolvers.virtualizations.relationship({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.sqlClient')}\n                to={resolvers.virtualizations.sqlClient({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.metrics')}\n                to={resolvers.virtualizations.metrics({\n                  virtualization,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationMetricsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationMetricsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationMetricsPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationMetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationMetricsPageRouteParams,\n        IVirtualizationMetricsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <div>\n              <HeaderView virtualizationId={virtualizationId} />\n              <Translation ns={['data', 'shared']}>\n                {t => <VirtualizationNavBar virtualization={virtualization} />}\n              </Translation>\n              <h3>Metrics page goes here.</h3>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationRelationshipPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationRelationshipPageRouteState#virtualizationId}.\n */\n\nexport interface IVirtualizationRelationshipPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationRelationshipPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationRelationshipPageRouteParams,\n        IVirtualizationRelationshipPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <div>\n              <HeaderView virtualizationId={virtualizationId} />\n              <Translation ns={['data', 'shared']}>\n                {t => <VirtualizationNavBar virtualization={virtualization} />}\n              </Translation>\n              <h3>Relationship page goes here.</h3>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers, WithVirtualizations } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  VirtualizationList,\n  VirtualizationListItem,\n  VirtualizationListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../resolvers';\n\nfunction getFilteredAndSortedVirtualizations(\n  virtualizations: RestDataService[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = virtualizations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter(\n      (virtualization: RestDataService) =>\n        virtualization.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort(\n    (thisVirtualization, thatVirtualization) => {\n      if (isSortAscending) {\n        return thisVirtualization.keng__id.localeCompare(\n          thatVirtualization.keng__id\n        );\n      }\n\n      // sort descending\n      return thatVirtualization.keng__id.localeCompare(\n        thisVirtualization.keng__id\n      );\n    }\n  );\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport function getVirtualizationsHref(baseUrl: string): string {\n  return `${baseUrl}`;\n}\n\nexport class VirtualizationsPage extends React.Component {\n  public filterUndefinedId(virtualization: RestDataService): boolean {\n    return virtualization.keng__id !== undefined;\n  }\n\n  public handleImportVirt(virtualizationName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import virtualization ' + virtualizationName);\n  }\n\n  public handleEditVirtualization() {\n    // TODO: implement handleEditVirtualization\n    alert('Edit virtualization ');\n  }\n\n  public handleExportVirtualization() {\n    // TODO: implement handleExportVirtualization\n    alert('Export virtualization ');\n  }\n\n  public render() {\n    return (\n      // TODO need to retrieve real here\n      <WithVirtualizationHelpers username=\"developer\">\n        {({\n          deleteVirtualization,\n          publishVirtualization,\n          unpublishServiceVdb,\n        }) => {\n          const handleDelete = async (virtualizationName: string) => {\n            await deleteVirtualization(virtualizationName);\n            // TODO: post toast notification\n          };\n          const handlePublish = async (virtualizationName: string) => {\n            await publishVirtualization(virtualizationName);\n            // TODO: post toast notification\n          };\n          const handleUnpublish = async (serviceVdbName: string) => {\n            await unpublishServiceVdb(serviceVdbName);\n            // TODO: post toast notification\n          };\n          return (\n            <WithVirtualizations>\n              {({ data, hasData, error }) => (\n                <WithListViewToolbarHelpers\n                  defaultFilterType={filterByName}\n                  defaultSortType={sortByName}\n                >\n                  {helpers => {\n                    const filteredAndSorted = getFilteredAndSortedVirtualizations(\n                      data,\n                      helpers.activeFilters,\n                      helpers.currentSortType,\n                      helpers.isSortAscending\n                    );\n\n                    return (\n                      <Translation ns={['data', 'shared']}>\n                        {t => (\n                          <VirtualizationList\n                            filterTypes={filterTypes}\n                            sortTypes={sortTypes}\n                            {...this.state}\n                            resultsCount={filteredAndSorted.length}\n                            {...helpers}\n                            i18nCreateDataVirtualization={t(\n                              'virtualization.createDataVirtualization'\n                            )}\n                            i18nCreateDataVirtualizationTip={t(\n                              'virtualization.createDataVirtualizationTip'\n                            )}\n                            i18nDescription={t(\n                              'virtualization.virtualizationsPageDescription'\n                            )}\n                            i18nEmptyStateInfo={t(\n                              'virtualization.emptyStateInfoMessage'\n                            )}\n                            i18nEmptyStateTitle={t(\n                              'virtualization.emptyStateTitle'\n                            )}\n                            i18nImport={t('shared:Import')}\n                            i18nImportTip={t(\n                              'virtualization.importVirtualizationTip'\n                            )}\n                            i18nLinkCreateVirtualization={t(\n                              'virtualization.createDataVirtualization'\n                            )}\n                            i18nName={t('shared:Name')}\n                            i18nNameFilterPlaceholder={t(\n                              'shared:nameFilterPlaceholder'\n                            )}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSorted.length,\n                            })}\n                            i18nTitle={t(\n                              'virtualization.virtualizationsPageTitle'\n                            )}\n                            linkCreateHRef={resolvers.virtualizations.create()}\n                            onImport={this.handleImportVirt}\n                            hasListData={data.length > 0}\n                          >\n                            <WithLoader\n                              error={error}\n                              loading={!hasData}\n                              loaderChildren={\n                                <VirtualizationListSkeleton\n                                  width={800}\n                                  style={{\n                                    backgroundColor: '#FFF',\n                                    marginTop: 30,\n                                  }}\n                                />\n                              }\n                              errorChildren={<div>TODO</div>}\n                            >\n                              {() =>\n                                filteredAndSorted.map(\n                                  (\n                                    virtualization: RestDataService,\n                                    index: number\n                                  ) => (\n                                    <VirtualizationListItem\n                                      key={index}\n                                      detailsPageLink={resolvers.virtualizations.views(\n                                        { virtualization }\n                                      )}\n                                      virtualizationName={\n                                        virtualization.keng__id\n                                      }\n                                      virtualizationDescription={\n                                        virtualization.tko__description\n                                          ? virtualization.tko__description\n                                          : ''\n                                      }\n                                      serviceVdbName={\n                                        virtualization.serviceVdbName\n                                      }\n                                      i18nCancelText={t('shared:Cancel')}\n                                      i18nDelete={t('shared:Delete')}\n                                      i18nDeleteModalMessage={t(\n                                        'virtualization.deleteModalMessage',\n                                        { name: virtualization.keng__id }\n                                      )}\n                                      i18nDeleteModalTitle={t(\n                                        'virtualization.deleteModalTitle'\n                                      )}\n                                      i18nDraft={t('shared:Draft')}\n                                      i18nEdit={t('shared:Edit')}\n                                      i18nEditTip={t(\n                                        'virtualization.editDataVirtualizationTip'\n                                      )}\n                                      i18nError={t('shared:Error')}\n                                      i18nExport={t('shared:Export')}\n                                      i18nPublished={t(\n                                        'virtualization.publishedDataVirtualization'\n                                      )}\n                                      i18nUnpublish={t('shared:Unpublish')}\n                                      i18nPublish={t('shared:Publish')}\n                                      onDelete={handleDelete}\n                                      onEdit={this.handleEditVirtualization}\n                                      onExport={this.handleExportVirtualization}\n                                      onUnpublish={handleUnpublish}\n                                      onPublish={handlePublish}\n                                      currentPublishedState={\n                                        virtualization.publishedState\n                                      }\n                                      publishLogUrl={''} // TODO set the generated url for the pod\n                                      i18nPublishInProgress={t(\n                                        'virtualization.publishInProgress'\n                                      )}\n                                      i18nPublishLogUrlText={t(\n                                        'shared:viewLogs'\n                                      )}\n                                    />\n                                  )\n                                )\n                              }\n                            </WithLoader>\n                          </VirtualizationList>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithListViewToolbarHelpers>\n              )}\n            </WithVirtualizations>\n          );\n        }}\n      </WithVirtualizationHelpers>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationSqlClientPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationSqlClientPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationSqlClientPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationSqlClientPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationSqlClientPageRouteParams,\n        IVirtualizationSqlClientPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <div>\n              <HeaderView virtualizationId={virtualizationId} />\n              <Translation ns={['data', 'shared']}>\n                {t => <VirtualizationNavBar virtualization={virtualization} />}\n              </Translation>\n              <h3>SQL Client page goes here.</h3>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViews } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { RestViewDefinition } from '@syndesis/models';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewList,\n  ViewListItem,\n  ViewListSkeleton,\n} from '@syndesis/ui';\nimport {\n  WithListViewToolbarHelpers,\n  WithLoader,\n  WithRouteData,\n} from '@syndesis/utils';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationViewsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationViewsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationViewsPageRouteState {\n  virtualization: RestDataService;\n}\n\nfunction getFilteredAndSortedViews(\n  views: RestViewDefinition[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = views;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((view: RestViewDefinition) =>\n      view.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisView, thatView) => {\n    if (isSortAscending) {\n      return thisView.keng__id.localeCompare(thatView.keng__id);\n    }\n\n    // sort descending\n    return thatView.keng__id.localeCompare(thisView.keng__id);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class VirtualizationViewsPage extends React.Component {\n  public filterUndefinedId(view: RestViewDefinition): boolean {\n    return view.keng__id !== undefined;\n  }\n\n  public handleDeleteView(viewName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import view ' + viewName);\n  }\n\n  public handleImportView(viewName: string) {\n    // TODO: implement handleImportView\n    alert('Import view ' + viewName);\n  }\n\n  public handleEditView() {\n    // TODO: implement handleEdit\n    alert('Edit view ');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationViewsPageRouteParams,\n        IVirtualizationViewsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <div>\n              <HeaderView virtualizationId={virtualizationId} />\n              <WithViews serviceVdbName={virtualization.serviceVdbName}>\n                {({ data, hasData, error }) => (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSorted = getFilteredAndSortedViews(\n                        data,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n                      return (\n                        <Translation ns={['data', 'shared']}>\n                          {t => (\n                            <>\n                              <VirtualizationNavBar\n                                virtualization={virtualization}\n                              />\n                              <ViewList\n                                filterTypes={filterTypes}\n                                sortTypes={sortTypes}\n                                {...this.state}\n                                resultsCount={filteredAndSorted.length}\n                                {...helpers}\n                                i18nDescription={t(\n                                  'data:virtualization.viewsPageDescription'\n                                )}\n                                i18nEmptyStateInfo={t(\n                                  'data:virtualization.viewEmptyStateInfo'\n                                )}\n                                i18nEmptyStateTitle={t(\n                                  'data:virtualization.viewEmptyStateTitle'\n                                )}\n                                i18nImportView={t('shared:Import')}\n                                i18nImportViewTip={t(\n                                  'data:virtualization.importViewTip'\n                                )}\n                                i18nCreateView={t('shared:Create')}\n                                i18nCreateViewTip={t(\n                                  'data:virtualization.createViewTip'\n                                )}\n                                i18nName={t('shared:Name')}\n                                i18nNameFilterPlaceholder={t(\n                                  'shared:nameFilterPlaceholder'\n                                )}\n                                i18nResultsCount={t('shared:resultsCount', {\n                                  count: filteredAndSorted.length,\n                                })}\n                                // TODO - Point to views.create when available\n                                linkCreateHRef={resolvers.virtualizations.create()}\n                                onImportView={this.handleImportView}\n                                hasListData={data.length > 0}\n                              />\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <ViewListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<div>TODO</div>}\n                              >\n                                {() =>\n                                  filteredAndSorted\n                                    .filter((view: RestViewDefinition) =>\n                                      this.filterUndefinedId(view)\n                                    )\n                                    .map(\n                                      (\n                                        view: RestViewDefinition,\n                                        index: number\n                                      ) => (\n                                        <ViewListItem\n                                          key={index}\n                                          viewName={view.keng__id}\n                                          viewDescription={\n                                            'Description goes here'\n                                          }\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nEdit={t('shared:Edit')}\n                                          i18nEditTip={t('view.editViewTip')}\n                                          onDelete={this.handleDeleteView}\n                                          onEdit={this.handleEditView}\n                                        />\n                                      )\n                                    )\n                                }\n                              </WithLoader>\n                            </>\n                          )}\n                        </Translation>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                )}\n              </WithViews>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport {\n  VirtualizationCreatePage,\n  VirtualizationMetricsPage,\n  VirtualizationRelationshipPage,\n  VirtualizationsPage,\n  VirtualizationSqlClientPage,\n  VirtualizationViewsPage,\n} from './pages';\nimport routes from './routes';\n\nexport default class DataApp extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.virtualizations.list}\n        />\n        <Route\n          path={routes.virtualizations.list}\n          exact={true}\n          component={VirtualizationsPage}\n        />\n        <Route\n          path={routes.virtualizations.create}\n          exact={true}\n          component={VirtualizationCreatePage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views}\n          exact={true}\n          component={VirtualizationViewsPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.relationship}\n          exact={true}\n          component={VirtualizationRelationshipPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.sqlClient}\n          exact={true}\n          component={VirtualizationSqlClientPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.metrics}\n          exact={true}\n          component={VirtualizationMetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n"],"sourceRoot":""}